# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import subprocess
import logging
from time import sleep
import pygame
from djitellopy import Tello  # Ensure this library is installed: pip install djitellopy

# Configure logging
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')

def run_command(command):
    """Run a shell command and capture the output."""
    try:
        logging.debug(f"Executing command: {command}")
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        logging.debug(f"Command succeeded: {result.stdout.strip()}")
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logging.error(f"Command failed: {command}\nError: {e.stderr.strip()}")
        return None

def scan_wifi_networks():
    """Scan for available Wi-Fi networks."""
    logging.debug("Scanning for available Wi-Fi networks...")
    output = run_command("nmcli -t -f ssid dev wifi")
    if output:
        networks = set(filter(None, map(str.strip, output.splitlines())))
        logging.debug(f"Available Wi-Fi networks: {networks}")
        return networks
    logging.error("Failed to scan for Wi-Fi networks.")
    return set()

def check_active_wifi_connection():
    """Check the currently active Wi-Fi connection."""
    logging.info("Checking current Wi-Fi connection...")
    output = run_command("nmcli -t -f active,ssid dev wifi | grep '^yes'")
    if output:
        active_network = output.split(":")[1]
        logging.info(f"Currently connected to: {active_network}")
        return active_network
    logging.warning("No active Wi-Fi connection detected.")
    return None

def disconnect_from_current_wifi():
    """Disconnect from the currently active Wi-Fi network."""
    active_network = check_active_wifi_connection()
    if not active_network:
        logging.warning("No active network to disconnect.")
        return True

    # Get list of active connections
    active_connections = run_command("nmcli -t -f NAME connection show --active")
    if not active_connections or active_network not in active_connections.splitlines():
        logging.warning(f"Active connection '{active_network}' not found in NetworkManager. Skipping disconnection.")
        return True

    logging.info(f"Disconnecting from current network: {active_network}")
    if run_command(f"nmcli connection down '{active_network}'"):
        logging.info(f"Successfully disconnected from network: {active_network}")
        return True
    else:
        logging.error(f"Failed to disconnect from the network: {active_network}")
        return False

def connect_to_tello_wifi(tello_ssid, retries=3):
    """Connect to the Tello Wi-Fi network with retries."""
    for attempt in range(retries):
        logging.info(f"Attempt {attempt + 1}/{retries}: Connecting to Tello Wi-Fi: {tello_ssid}")
        if run_command(f"nmcli device wifi connect '{tello_ssid}'"):
            sleep(5)  # Allow time for the connection to stabilize
            if check_active_wifi_connection() == tello_ssid:
                logging.info(f"Successfully connected to Tello Wi-Fi: {tello_ssid}")
                return True
            else:
                logging.warning("Verification failed after connection attempt.")
        else:
            logging.warning(f"Failed to connect to {tello_ssid} on attempt {attempt + 1}. Retrying...")
        sleep(2)
    logging.error(f"Failed to connect to Tello Wi-Fi after {retries} attempts.")
    return False

def initialize_joystick():
    """Initialize the joystick and return the joystick instance."""
    pygame.init()
    pygame.joystick.init()

    joystick_count = pygame.joystick.get_count()
    logging.info(f"Number of joysticks detected: {joystick_count}")

    if joystick_count == 0:
        logging.warning("No joystick detected. Falling back to autonomous mode.")
        return None

    joystick = pygame.joystick.Joystick(0)
    joystick.init()
    logging.info(f"Joystick initialized: {joystick.get_name()}")
    return joystick

def process_joystick_input(drone, joystick):
    """Process joystick input to control the drone."""
    pygame.event.pump()  # Update joystick events
    axis_forward_back = joystick.get_axis(1)  # Forward/Backward
    axis_left_right = joystick.get_axis(0)  # Left/Right
    axis_up_down = joystick.get_axis(2)  # Up/Down
    axis_yaw = joystick.get_axis(3)  # Rotation

    # Map axis values to drone speeds
    forward_speed = int(-axis_forward_back * 100)  # Forward is negative
    turn_speed = int(axis_left_right * 100)
    up_down_speed = int(axis_up_down * 100)
    yaw_speed = int(axis_yaw * 100)

    # Debugging joystick inputs
    logging.debug(f"Joystick axes: Forward/Backward={forward_speed}, Left/Right={turn_speed}, Up/Down={up_down_speed}, Yaw={yaw_speed}")

    # Send RC control to the drone
    drone.send_rc_control(turn_speed, forward_speed, up_down_speed, yaw_speed)

def connect_drone(drone, retries=3, delay=5):
    """Retry drone connection if it fails."""
    for attempt in range(retries):
        try:
            logging.info(f"Connecting to Tello (Attempt {attempt + 1}/{retries})...")
            drone.connect()
            logging.info("Connection successful.")
            return True
        except Exception as e:
            logging.warning(f"Connection attempt {attempt + 1} failed: {e}")
            sleep(delay)
    logging.error("Failed to connect to Tello after multiple attempts.")
    return False

def drone_logic(drone):
    """Control the drone to take off, check joystick input, and perform movements."""
    logging.info("Drone is taking off...")

    # Pre-checks before takeoff
    battery = drone.get_battery()
    logging.info(f"Battery level: {battery}%")
    if battery < 20:
        logging.error("Battery too low for takeoff.")
        return

    joystick = initialize_joystick()

    try:
        drone.takeoff()
        if joystick:
            logging.info("Joystick detected. Starting manual control.")
            while True:
                process_joystick_input(drone, joystick)
                sleep(0.1)  # Poll joystick input every 100ms
        else:
            logging.info("No joystick detected. Performing autonomous movements...")
            logging.info("Moving forward for 3 seconds...")
            drone.send_rc_control(0, 50, 0, 0)  # Forward
            sleep(3)

            logging.info("Moving backward for 3 seconds...")
            drone.send_rc_control(0, -50, 0, 0)  # Backward
            sleep(3)

            drone.send_rc_control(0, 0, 0, 0)  # Stop movement
    except Exception as e:
        logging.error(f"An error occurred during flight: {e}")
    finally:
        logging.info("Landing the drone...")
        drone.land()
        pygame.quit()

# Main Execution
def main():
    tello_ssid = "TELLO-314B32"
    logging.info("Initializing Tello connection process...")

    available_networks = scan_wifi_networks()
    if tello_ssid not in available_networks:
        logging.critical(f"Tello Wi-Fi '{tello_ssid}' not detected. Ensure the drone is powered on and within range.")
        return

    if not disconnect_from_current_wifi():
        logging.error("Failed to disconnect from the current Wi-Fi network.")
        return

    if not connect_to_tello_wifi(tello_ssid):
        logging.error("Unable to establish a connection to Tello Wi-Fi.")
        return

    logging.info("Tello Wi-Fi connection established successfully.")
    drone = Tello()

    if connect_drone(drone):
        try:
            drone_logic(drone)
        except Exception as e:
            logging.error(f"An error occurred while controlling the drone: {e}")
            try:
                drone.land()  # Ensure the drone lands safely in case of error
            except Exception as land_error:
                logging.error(f"An error occurred during landing: {land_error}")
    else:
        logging.critical("Unable to connect to the Tello drone.")

if __name__ == "__main__":
    main()
